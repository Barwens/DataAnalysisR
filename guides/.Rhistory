library("kableExtra")
# Your code here
# Your code here
# Your code here
# Your code here
# Your code here
# Your code here
# Your code here
library(dplyr)
library(ggplot2)
library(tictoc)
library(dplyr)
library(ggplot2)
library(tictoc)
library(dplyr)
library(ggplot2)
library(tictoc)
admin <- "Yuval" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/gibberish_map"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name)
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/gibberish_map"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name)
gibberish.map <- read.csv(gibberish_map_name)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(gibberish.map[1])[1]){
key <- gibberish.map[i,1]
value <- as.character(gibberish.map[i,2])
crimes.full$town[crimes.full$town_gibb[crimes.full$town_gibb == key]] <- value
}
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/gibberish_map"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name,stringsAsFactors = FALSE)
gibberish.map <- read.csv(gibberish_map_name,stringsAsFactors = FALSE)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(gibberish.map[1])[1]){
key <- gibberish.map[i,1]
value <- as.character(gibberish.map[i,2])
crimes.full$town[crimes.full$town_gibb[crimes.full$town_gibb == key]] <- value
}
remove(crimes.full)
remove(gibberish.map)
save.image("~/Dropbox (Personal)/School/Thesis/workspaces/dmrseq_parameter_testing_ws.RData")
library(dplyr)
library(ggplot2)
library(tictoc)
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/gibberish_map"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name)
gibberish.map <- read.csv(gibberish_map_name)
View(crimes.full)
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/gibberish_map"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name, stringsAsFactors = FALSE)
gibberish.map <- read.csv(gibberish_map_name, stringsAsFactors = FALSE)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(gibberish.map[1])[1]){
key <- gibberish.map[i,1]
value <- as.character(gibberish.map[i,2])
crimes.full$town[crimes.full$town_gibb[crimes.full$town_gibb == key]] <- value
}
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[1,i]
value <- as.character(lab1.map[i,2])
crimes.full$town[crimes.full$town_number[crimes.full$town_number == key]] <- value
}
dim(gibberish.map[1])[1]
i =1
gibberish.map[i,1]
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/2017 Course Git/DataAnalysisR/course_data/israel_crime_full_lab1.csv"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/2017 Course Git/DataAnalysisR/course_data/lab1_map.csv"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name, stringsAsFactors = FALSE)
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/2017 Course Git/DataAnalysisR/course_data/israel_crime_full_lab1"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/2017 Course Git/DataAnalysisR/course_data/lab1_map.csv"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name, stringsAsFactors = FALSE)
gibberish.map <- read.csv(gibberish_map_name, stringsAsFactors = FALSE)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(gibberish.map[1])[1]){
key <- gibberish.map[i,1]
value <- as.character(gibberish.map[i,2])
crimes.full$town[crimes.full$town_gibb[crimes.full$town_gibb == key]] <- value
}
crimes.full$town <- as.factor(crimes.full$town)
toc()
#using join:
tic("Joining:")
df.joined <- merge(x = crimes.full,y = gibberish.map, by= "town_gibb")
remove(crimes.full)
remove(gibberish.map)
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_gibberish.csv"
gibberish_map_name <-"/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/gibberish_map"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/2017 Course Git/DataAnalysisR/course_data/israel_crime_full_lab1"
gibberish_map_name <- "~/Dropbox (Personal)/School/52414/2017 Course Git/DataAnalysisR/course_data/lab1_map.csv"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name, stringsAsFactors = FALSE)
gibberish.map <- read.csv(gibberish_map_name, stringsAsFactors = FALSE)
View(crimes.full)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[1,i]
value <- as.character(lab1.map[i,2])
crimes.full$town[crimes.full$town_number[crimes.full$town_number == key]] <- value
}
View(crimes.full)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(gibberish.map[1])[1]){
key <- gibberish.map[i,1]
value <- as.character(gibberish.map[i,2])
crimes.full$town[crimes.full$town_gibb[crimes.full$town_gibb == key]] <- value
}
crimes.full$town <- as.factor(crimes.full$town)
toc()
View(crimes.full)
dim(gibberish.map[1])[1])
dim(gibberish.map[1])[1])
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
crime_file_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/israeli_crime_full_lab1.csv"
} else if (admin == "Lee"){
crime_file_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/israel_crime_full_lab1"
lab1_map_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/lab1_map.csv"
} else {
print("Admin name not specified correctly")
}
crimes.full <- read.csv(crime_file_name, encoding="UTF-8")
lab1.map <- read.csv(lab1_map_name, encoding="UTF-8")
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[1,i]
value <- as.character(lab1.map[i,2])
crimes.full$town[crimes.full$town_number[crimes.full$town_number == key]] <- value
}
crimes.full$town <- as.factor(crimes.full$town)
toc()
#using join:
tic("Joining:")
df.joined <- merge(x = crimes.full,y = lab1.maprrrrrsa, by= "town_gibb")
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[1,i]
value <- as.character(lab1.map[i,2])
crimes.full$town[crimes.full$town_number[crimes.full$town_number == key]] <- value
}
crimes.full$town <- as.factor(crimes.full$town)
toc()
View(crimes.full)
dim(lab1.map[1])[1])
lab1.map[1]
dim(lab1.map[1])[1]
lab1.map[1,i]
lab1.map[1]
lab1.map[1,1]
lab1.map[1,2]
lab1.map[1,3]
View(lab1.map)
# Your code here
# Load datasets here
crimes.full.name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/israel_crime_full_lab1"
lab1.map.name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/lab1_map.csv"
crimes.full <- read.csv(crimes.full.name, stringsAsFactors = FALSE)
lab1.map <- read.csv(lab1.map.name, stringsAsFactors = FALSE)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[1,i]
value <- as.character(lab1.map[i,2])
crimes.full$town[crimes.full$town_number[crimes.full$town_number == key]] <- value
}
crimes.full$town <- as.factor(crimes.full$town)
toc()
View(crimes.full)
lab1.map[1,i]
View(lab1.map)
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[i,2]
value <- as.character(lab1.map[i,1])
crimes.full$town[crimes.full$town_number[crimes.full$town_number == key]] <- value
}
lab1.map[i,2]
i=1
lab1.map[i,2]
dim(lab1.map[1])[1]
lab1.map[i,1]
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[i,2]
value <- as.character(lab1.map[i,1])
crimes.full$town[crimes.full$town_number == key] <- value
}
#crimes.full$town <- as.factor(crimes.full$town)
toc()
View(crimes.full)
tic("Joining:")
df.joined <- merge(x = crimes.full,y = lab1.map, by= "town_number")
toc()
tic("Looping:")
crimes.full$town <- NA
for (i in 1:dim(lab1.map[1])[1]){
key <- lab1.map[i,2]
value <- as.character(lab1.map[i,1])
crimes.full$town[crimes.full$town_number == key] <- value
}
#crimes.full$town <- as.factor(crimes.full$town)
toc()
tic("Joining:")
df.joined <- merge(x = crimes.full,y = lab1.map, by= "town_number")
toc()
#crimes.full <- crimes.full %>%
#    mutate(crimes.full, total_assaults= assaults+robberies+sexual_assault)
crimes.full$total_assaults <- crimes.full$assaults+crimes.full$robberies+crimes.full$sexual_assault
crimes.full$total_assaults_rate <- 10000*crimes.full$total_assaults / (crimes.full$population)
crimes.full %>%
filter(crimes.full$year=="2013") %>%
filter(total_assaults==max(total_assaults)) %>%
select(town)
crimes.full %>%
filter(crimes.full$year=="2013") %>%
filter(total_assaults_rate==max(total_assaults_rate)) %>%
select(town)
plot(crimes.full$population,
crimes.full$total_assaults,
xlab = "Population",
ylab = "Total Assaults",
main = "Population and Total Assaults Across Israeli Towns")
plot(crimes.full$population,
crimes.full$total_assaults,
xlab = "Population",
ylab = "Total Assaults",
main = "Population and Total Assaults Across Israeli Towns")
legend(x='bottomright', legend=paste('Cor =',round(cor(crimes.full$population, crimes.full$total_assaults),2)))
## can use histogram
hist(crimes.full$total_assaults_rate[which(crimes.full$year=="2013")],
breaks = 30,
xlab = "Total Assaults per 10,000",
ylab = "Number of towns",
main = "Total Assaults Rates Across Israeli Towns")
## can use boxplot by region
boxplot(total_assaults_rate ~ region,
data = crimes.full[which(crimes.full$year=="2013"),],
xlab = "Region",
ylab = "Total Assaults per 10,000",
main = "Total Assaults Rates by Region",
las=2)
#boxplot(df$Rate~df$Purpose)
crimes.full %>%
ggplot(aes(x = total_assaults_rate)) +
geom_histogram(color = "black", fill = "gray", boundary = 0, binwidth = 10) +
ylab("Number of Towns") +
xlab("Cases per 10,000") +
facet_grid(. ~ year) +
scale_x_continuous(breaks = seq(0, 169, 20)) +
ggtitle("Total Assualts Rate Across Towns")
library(RColorBrewer)
crimes.full %>%
filter(population >= 87000) %>%
ggplot(aes(x = year, y = town,  fill = total_assaults_rate)) +
geom_tile(color = "grey50") +
scale_x_discrete(expand = c(0,0)) +
scale_fill_gradientn("Cases per\n10,000",
colors = brewer.pal(9, "Reds")) +
theme_minimal() +
theme(panel.grid = element_blank()) +
ggtitle("Total Assault Rate per 10,000 by Town") +
ylab("") + xlab("")
library(RColorBrewer)
crimes.full %>%
filter(population >= 87000) %>%
ggplot(aes(x = year, y = town,  fill = total_assaults_rate)) +
geom_tile(color = "grey50") +
scale_x_discrete(expand = c(0,0)) +
scale_fill_gradientn("Cases per\n10,000",
colors = brewer.pal(9, "Reds")) +
theme_minimal() +
theme(panel.grid = element_blank()) +
ggtitle("Total Assault Rate per 10,000 by Town") +
ylab("") + xlab("")
ggplot(data = regions)+
geom_rect(aes(xmin=start , xmax=end , ymin=ymin , ymax=ymax ),
fill=factor(ifelse(abs(regions$qval)<=0.05, ifelse(regions$beta>=0, "blue", "red"), "black")))+
scale_y_continuous(labels= minInSpan,breaks = seq(0+0.5,length(minInSpan)-0.5,1),name = "minInSpan")+
ggtitle("DMRs as a function of various minInSpan smoothing parameters")+
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = seq(min(regions$start), max(regions$end), by = 10000))
```{r, eval=FALSE}
ggsave('diffParamDMRs_minInSpan_shorty', plot = last_plot(), device = "png", path = '/Users/lee/Dropbox (Personal)/School/Thesis/',
scale = 1, width = 200, height = 10, units = "cm", limitsize = FALSE)
ggplot(data = regions_bp)+
geom_rect(aes(xmin=start , xmax=end , ymin=ymin , ymax=ymax ),
fill=factor(ifelse(abs(regions_bp$qval)<=0.05, ifelse(regions_bp$beta>=0, "blue", "red"), "black")))+
scale_y_continuous(labels= bpSpan,breaks = seq(0+0.5,length(bpSpan)-0.5,1),name = "bpSpan")+
ggtitle("DMRs as a function of various bpSpan smoothing parameters")+
theme(plot.title = element_text(hjust = 0.5))+
scale_x_continuous(breaks = seq(min(regions_bp$start), max(regions_bp$end), by = 10000))
ggsave('diffParamDMRs_bpSpan_shorty', plot = last_plot(), device = "png", path = '/Users/lee/Dropbox (Personal)/School/Thesis/',
scale = 1, width = 200, height = 10, units = "cm", limitsize = FALSE)
library(dslabs)
data(us_contagious_diseases)
library(tidyverse)
the_disease <- "Measles"
dat <- us_contagious_diseases %>%
filter(!state %in% c("Hawaii","Alaska"),
disease == the_disease) %>%
mutate(rate = (count / weeks_reporting) * 52 / (population / 100000)) %>%
mutate(state = reorder(state, rate))
View(dat)
write.csv(us_contagious_diseases,file = "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/diseases",row.names = FALSE)
us_contagious_diseases <- read.csv(file = "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/diseases", stringsAsFactors = FALSE)
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
us_contagious_diseases_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/diseases"
} else if (admin == "Lee"){
us_contagious_diseases_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/diseases"
} else {
print("Admin name not specified correctly")
}
us_contagious_diseases <- read.csv(file = us_contagious_diseases_name, stringsAsFactors = FALSE)
library(tidyverse)
the_disease <- "Measles"
dat <- us_contagious_diseases %>%
filter(!state %in% c("Hawaii","Alaska"),
disease == the_disease) %>%
mutate(rate = (count / weeks_reporting) * 52 / (population / 100000)) %>%
mutate(state = reorder(state, rate))
library(tidyverse)
the_disease <- "Measles"
dat <- us_contagious_diseases %>%
filter(!state %in% c("Hawaii","Alaska"),
disease == the_disease) %>%
mutate(rate = (count / weeks_reporting) * 52 / (population / 100000)) %>%
mutate(state = reorder(state, rate))
head(dat)
dat %>%
filter(state == "California", !is.na(rate)) %>%
ggplot(aes(x = year, y = rate)) +
geom_line(alpha = 1/2) +
geom_point() +
ylab("Cases per 100,000") +
xlab("Year") +
ggtitle("Measles Cases in California") +
geom_vline(xintercept = 1963, col = "blue")
library(tidyverse)
admin <- "Lee" #  "Lee" # or
if (admin=="Yuval") {
us_contagious_diseases_name <- "/Users/yuvalb/Dropbox/52414/Lectures_2018/course_data/diseases"
} else if (admin == "Lee"){
us_contagious_diseases_name <- "~/Dropbox (Personal)/School/52414/Lectures_2018/course_data/diseases"
} else {
print("Admin name not specified correctly")
}
us_contagious_diseases <- read.csv(file = us_contagious_diseases_name, stringsAsFactors = FALSE)
the_disease <- "Measles"
dat <- us_contagious_diseases %>%
filter(!state %in% c("Hawaii","Alaska"),
disease == the_disease) %>%
mutate(rate = (count / weeks_reporting) * 52 / (population / 100000)) %>%
mutate(state = reorder(state, rate))
head(dat)
dat %>%
filter(state == "California", !is.na(rate)) %>%
ggplot(aes(x = year, y = rate)) +
geom_line(alpha = 1/2) +
geom_point() +
ylab("Cases per 100,000") +
xlab("Year") +
ggtitle("Measles Cases in California") +
geom_vline(xintercept = 1963, col = "blue")
dat %>%
filter(year %in% c(1950,1960,1970), !is.na(rate)) %>%
ggplot(aes(x = rate)) +
geom_histogram(color = "black", fill = "gray", boundary = 0, binwidth = 50) +
ylab("Number of States") +
xlab("Cases per 100,000") +
facet_grid(. ~ year) +
scale_x_continuous(breaks = seq(0, 1e5, 2e2)) +
ggtitle("Meales Cases Across States")
dat %>%
filter(year %in% c(1950, 1960, 1970), !is.na(rate)) %>%
ggplot(aes(x = rate)) +
geom_histogram(color = "black", fill = "gray", boundary = 0, binwidth = 3) +
ylab("Number of States") +
xlab("Cases per 100,000") +
facet_grid(. ~ year) +
scale_x_sqrt(breaks = seq(0, 50, 6)^2) +
ggtitle("Meales Cases Across States (square-root transformed)")
dat %>%
filter(state == "California", !is.na(rate)) %>%
ggplot(aes(x = year, y = rate)) +
geom_line(alpha = 1/2) +
geom_point() +
scale_y_sqrt("Cases per 100,000", breaks = seq(0, 100, 2)^2) +
xlab("Year") +
ggtitle("Measles Cases in California") +
geom_vline(xintercept = 1963, col = "blue")
dat %>%
filter(!is.na(rate)) %>%
ggplot(aes(x = factor(year), y = rate)) +
geom_boxplot() +
xlab("Year") +
scale_y_sqrt("Cases per 100,000", breaks = seq(0, 100, 4)^2) +
theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 1/2)) +
ggtitle("Measles Cases per 100,000 by State")
avg <- dat %>%
filter(weeks_reporting > 0) %>%
group_by(year) %>%
summarize(us_rate = sum(count / weeks_reporting) * 52 / sum(population / 100000))
dat %>%
filter(!is.na(rate)) %>%
ggplot() +
geom_line(aes(x = year, y = rate, group = state), color = "grey50",
show.legend = FALSE, alpha = 0.2, size = 1) +
geom_line(data = avg, mapping = aes(x = year, y = us_rate),
size = 1, color = "black") +
xlab("Year") +
scale_y_sqrt("Cases per 100,000", breaks = seq(0, 100, 4)^2) +
ggtitle("Measles Cases per 100,000 by State") +
geom_vline(xintercept=1963, col = "blue") +
annotate(geom="text", x=1955, y=150, label="US average", color="black")
library(RColorBrewer)
dat %>%
filter(year <= 1980) %>%
ggplot(aes(x = year, y = state,  fill = rate)) +
geom_tile(color = "grey50") +
scale_x_continuous(expand = c(0,0)) +
scale_fill_gradientn("Cases per\n100,000",
colors = brewer.pal(9, "Reds"),
trans = "sqrt") +
geom_vline(xintercept = 1963, col = "blue") +
theme_minimal() +
theme(panel.grid = element_blank()) +
ggtitle("Measles Cases per 100,000 by State") +
ylab("") + xlab("")
library("sodium")
library("cyphr")
# To install cypher:
# remotes::install_github("ropensci/cyphr", upgrade = FALSE)
library("sodium")
library("cyphr")
library("repmis") #see line 17
